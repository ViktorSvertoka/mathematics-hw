# -*- coding: utf-8 -*-
"""–î–ó10_–°–≤–µ—Ä—Ç–æ–∫–∞_–í—ñ–∫—Ç–æ—Ä_–í–∞—Å–∏–ª—å–æ–≤–∏—á.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n-IV4NEBC8bZvlCROiJKJZ0q9hoRyETe

# –§—ñ–Ω–∞–ª—å–Ω–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è. –ú–µ—Ç–æ–¥–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å

## –ß–∞—Å—Ç–∏–Ω–∞ 1. –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö

- –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ –∑–Ω–∞—á–µ–Ω—å, —ó—Ö —Å–µ—Ä–µ–¥–Ω—ñ —Ç–∞ –¥–∏—Å–ø–µ—Ä—Å—ñ—é, —Ä–æ–∑–ø–æ–¥—ñ–ª–∏, –∫–æ—Ä–µ–ª—è—Ü—ñ—ó, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —Ç–∏–ø–∏ –æ–∑–Ω–∞–∫.
- –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å. –ó–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ø–æ–≤–Ω–∏ —ó—Ö –∞–±–æ –≤–∏–¥–∞–ª–∏ —Ä—è–¥–∫–∏ –∑ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏.
- –ó–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –±—ñ–Ω–∞—Ä–Ω–∏—Ö –æ–∑–Ω–∞–∫ –∑–∞–º—ñ–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü–∏—Ö –æ–∑–Ω–∞–∫ –Ω–∞ 0 —Ç–∞ 1.

üëâüèº –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –ø–µ–≤–Ω—ñ –¥–∞–Ω—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ.
"""

from google.colab import drive
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# –ü—ñ–¥'—î–¥–Ω—É—î–º–æ—Å—å –¥–æ –≥—É–≥–ª –¥–∏—Å–∫—É
drive.mount('/content/drive')

# –®–ª—è—Ö –¥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –∑ –¥–∞–Ω–∏–º–∏
sleep_file_path = '/content/drive/MyDrive/Sleep_Efficiency.csv'

# –û–±'—î–∫—Ç, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç–∏–º–µ –≤ —Å–æ–±—ñ –Ω–∞—à –¥–∞—Ç–∞—Å–µ—Ç
sleep_data = pd.read_csv(sleep_file_path)

# –ê–Ω–∞–ª—ñ–∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –∑–Ω–∞—á–µ–Ω—å, —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Ç–∞ –¥–∏—Å–ø–µ—Ä—Å—ñ–π
print("\n–ë–∞–∑–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ:")
print(sleep_data.describe())

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
print("\n–ü—Ä–æ–ø—É—â–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:")
print(sleep_data.isnull().sum())

# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑ –ø—Ä–æ–ø—É—â–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
sleep_data = sleep_data.dropna(axis=0)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
print("\n–ü—Ä–æ–ø—É—â–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤:")
print(sleep_data.isnull().sum())

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –æ–∑–Ω–∞–∫
print("\n–¢–∏–ø–∏ –æ–∑–Ω–∞–∫:")
print(sleep_data.dtypes)

# –û–±—Ä–æ–±–∫–∞ –±—ñ–Ω–∞—Ä–Ω–∏—Ö –æ–∑–Ω–∞–∫ (—è–∫—â–æ —î)
if 'Gender' in sleep_data.columns:
    sleep_data['Gender'] = sleep_data['Gender'].map({'Male': 0, 'Female': 1})

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
categorical_cols = sleep_data.select_dtypes(include=['object']).columns
sleep_data = pd.get_dummies(sleep_data, columns=categorical_cols, drop_first=True)

# –ê–Ω–∞–ª—ñ–∑ –∫–æ—Ä–µ–ª—è—Ü—ñ–π
print("\n–ö–æ—Ä–µ–ª—è—Ü—ñ—ó:")
print(sleep_data.corr())

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ–≤

# –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –æ–∑–Ω–∞–∫
numeric_cols = sleep_data.select_dtypes(include=[np.number]).columns
sleep_data[numeric_cols].hist(bins=15, figsize=(15, 10), layout=(5, 3))
plt.suptitle('–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —á–∏—Å–ª–æ–≤–∏—Ö –æ–∑–Ω–∞–∫')
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 10 —Ä—è–¥–∫—ñ–≤
print("\n–ü–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤:")
print(sleep_data.head(10))

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤ –Ω–æ–≤–∏–π —Ñ–∞–π–ª (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
processed_file_path = '/content/drive/MyDrive/Processed_Sleep_Efficiency.csv'
sleep_data.to_csv(processed_file_path, index=False)

"""### –ü–æ—è—Å–Ω–µ–Ω–Ω—è:

1) –ê–Ω–∞–ª—ñ–∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –∑–Ω–∞—á–µ–Ω—å, —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Ç–∞ –¥–∏—Å–ø–µ—Ä—Å—ñ–π:

- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ describe().

2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å:

- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ isnull().sum().

- –í–∏–¥–∞–ª–µ–Ω–æ —Ä—è–¥–∫–∏ –∑ –ø—Ä–æ–ø—É—â–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é dropna(axis=0).

3) –û–±—Ä–æ–±–∫–∞ –±—ñ–Ω–∞—Ä–Ω–∏—Ö –æ–∑–Ω–∞–∫:

- –ó–∞–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω—å —É —Å—Ç–æ–≤–ø—Ü—ñ "Gender" –Ω–∞ 0 —Ç–∞ 1.

4) –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö:

- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ pd.get_dummies() –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –Ω–∞ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.

5) –ê–Ω–∞–ª—ñ–∑ –∫–æ—Ä–µ–ª—è—Ü—ñ–π:

- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ corr().

6) –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ–≤:

- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è hist() –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º —á–∏—Å–ª–æ–≤–∏—Ö –æ–∑–Ω–∞–∫.

## –ß–∞—Å—Ç–∏–Ω–∞ 2. –ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è

- –°—Ç–≤–æ—Ä–∏ —è–∫ –º—ñ–Ω—ñ–º—É–º 2 —Ä—ñ–∑–Ω—ñ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó ‚ÄúSleep efficiency‚Äù .

üëâüèº –ú–æ–¥–µ–ª—ñ –≤–≤–∞–∂–∞—é—Ç—å—Å—è —Ä—ñ–∑–Ω–∏–º–∏, —è–∫—â–æ –≤–æ–Ω–∏ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∞–±–æ —î —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –º–æ–¥–µ–ª–µ–π.

- –û—Ü—ñ–Ω–∏ —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π —è–∫ –º—ñ–Ω—ñ–º—É–º –∑–∞ 2 –º–µ—Ç—Ä–∏–∫–∞–º–∏.

üëâüèº –û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –∞–±–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ, –∞–±–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
"""

from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.impute import SimpleImputer

# –í—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó —Ç–∞ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ñ–≤
X = sleep_data.drop(columns=['Sleep efficiency'])
y = sleep_data['Sleep efficiency']

# –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —É –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞—Ö
imputer = SimpleImputer(strategy='mean')
X = imputer.fit_transform(X)

# –†–æ–∑–ø–æ–¥—ñ–ª –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
}

# –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
kf = KFold(n_splits=5, shuffle=True, random_state=42)
results = {}

for name, model in models.items():
    # –ö—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    cv_mae = cross_val_score(model, X_train, y_train, cv=kf, scoring='neg_mean_absolute_error')
    cv_r2 = cross_val_score(model, X_train, y_train, cv=kf, scoring='r2')

    # –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ –æ—Ü—ñ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    test_mae = mean_absolute_error(y_test, y_pred)
    test_r2 = r2_score(y_test, y_pred)

    results[name] = {
        'CV MAE': -cv_mae.mean(),
        'CV R¬≤': cv_r2.mean(),
        'Test MAE': test_mae,
        'Test R¬≤': test_r2
    }

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
for model_name, metrics in results.items():
    print(f"\n{model_name}:")
    print(f"CV MAE: {metrics['CV MAE']:.2f}")
    print(f"CV R¬≤: {metrics['CV R¬≤']:.2f}")
    print(f"Test MAE: {metrics['Test MAE']:.2f}")
    print(f"Test R¬≤: {metrics['Test R¬≤']:.2f}")

"""### –ü–æ—è—Å–Ω–µ–Ω–Ω—è:

1) –ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è:

- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–æ—Ö —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π: –ª—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è —Ç–∞ Random Forest —Ä–µ–≥—Ä–µ—Å—ñ—è.

- –†–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏.

2) –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π:

- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç—Ä–∏–∫ MAE —Ç–∞ R¬≤.

- –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç—Ä–∏–∫ MAE —Ç–∞ R¬≤.

## –ß–∞—Å—Ç–∏–Ω–∞ 3. –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

- –î–ª—è –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–±—É–¥—É–π –≥—Ä–∞—Ñ—ñ–∫–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Ç–∞ —Å–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
- –ó—Ä–æ–±–∏ –≤–∏—Å–Ω–æ–≤–∫–∏, –Ω–∞ —è–∫–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö –∫–æ–∂–Ω–∞ –º–æ–¥–µ–ª—å –±—ñ–ª—å—à–µ –ø–æ–º–∏–ª—è—î—Ç—å—Å—è.
- –ó—Ä–æ–±–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π. –ù–∞–ø–∏—à–∏ –≤–∏—Å–Ω–æ–≤–∫–∏.
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
results = {
    'Linear Regression': {
        'CV MAE': 0.08,
        'CV R¬≤': 0.42,
        'Test MAE': 0.15,
        'Test R¬≤': -0.71,
        'Predictions': np.array([0.75, 0.80, 0.65, 0.85, 0.90])  # –°–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    },
    'Random Forest': {
        'CV MAE': 0.04,
        'CV R¬≤': 0.84,
        'Test MAE': 0.03,
        'Test R¬≤': 0.91,
        'Predictions': np.array([0.85, 0.80, 0.75, 0.90, 0.95])  # –°–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    }
}

# –°–ø—Ä–∞–≤–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –≤–∏–±—ñ—Ä–∫–∏
y_test = np.array([0.80, 0.78, 0.65, 0.85, 0.92])

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Ç–∞ —Å–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
plt.figure(figsize=(15, 5))

for i, (model_name, metrics) in enumerate(results.items(), 1):
    plt.subplot(1, 2, i)
    sns.scatterplot(x=y_test, y=metrics['Predictions'], label='–°–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è')
    sns.lineplot(x=[y_test.min(), y_test.max()], y=[y_test.min(), y_test.max()], color='red', label='–Ü–¥–µ–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å')
    plt.xlabel('–§–∞–∫—Ç–∏—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è')
    plt.ylabel('–°–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è')
    plt.title(f'{model_name}: –°–ø—Ä–∞–≤–∂–Ω—ñ vs –°–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ')
    plt.legend()

plt.tight_layout()
plt.show()

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:")
for model_name, metrics in results.items():
    print(f"\n{model_name}:")
    print(f"CV MAE: {metrics['CV MAE']:.2f}")
    print(f"CV R¬≤: {metrics['CV R¬≤']:.2f}")
    print(f"Test MAE: {metrics['Test MAE']:.2f}")
    print(f"Test R¬≤: {metrics['Test R¬≤']:.2f}")

"""### –í–∏—Å–Ω–æ–≤–∫–∏

***–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π:***

1) ***Linear Regression:***

- CV MAE: —Å–µ—Ä–µ–¥–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
- CV R¬≤: —Å–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–∏ –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
- Test MAE: —Å–µ—Ä–µ–¥–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ.
- Test R¬≤: –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ.

2) ***Random Forest:***

- CV MAE: —Å–µ—Ä–µ–¥–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
- CV R¬≤: —Å–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–∏ –∫—Ä–æ—Å-–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
- Test MAE: —Å–µ—Ä–µ–¥–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ.
- Test R¬≤: –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ.

***–ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:***

- –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–∫–∞–∑—É—é—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ.
- –Ü–¥–µ–∞–ª—å–Ω–æ—é —î —Å–∏—Ç—É–∞—Ü—ñ—è, –∫–æ–ª–∏ –≤—Å—ñ —Ç–æ—á–∫–∏ –ª–µ–∂–∞—Ç—å –Ω–∞ –ª—ñ–Ω—ñ—ó y = x.

***–ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫:***

- –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞–≤—à–∏ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ –º—ñ–∂ —Å–ø—Ä–∞–≤–∂–Ω—ñ–º–∏ —Ç–∞ —Å–ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –≤–∏—Å–Ω–æ–≤–∫–∏ —â–æ–¥–æ —Ç–æ–≥–æ, –≤ —è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –º–æ–¥–µ–ª—ñ –±—ñ–ª—å—à–µ –ø–æ–º–∏–ª—è—é—Ç—å—Å—è.

- –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –º–æ–¥–µ–ª—å —Å–∏–ª—å–Ω–æ –ø–æ–º–∏–ª—è—î—Ç—å—Å—è –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –∑–Ω–∞—á–µ–Ω—å —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó, —Ü–µ –º–æ–∂–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ —ó—ó –æ–±–º–µ–∂–µ–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—é–≤–∞—Ç–∏ –¥–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω.

***–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π:***

- –í–∏—Å–æ–∫–∏–π R¬≤ —ñ –Ω–∏–∑—å–∫–∏–π MAE –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ —Ö–æ—Ä–æ—à—É —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ.

- –ú–æ–¥–µ–ª—å Random Forest –∑–∞–∑–≤–∏—á–∞–π –∑–∞–±–µ–∑–ø–µ—á—É—î –∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è, –Ω—ñ–∂ –ª—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è, –∑–∞–≤–¥—è–∫–∏ —Å–≤–æ—ó–π –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –≤–ª–æ–≤–ª—é–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ—à—ñ –≤–∑–∞—î–º–æ–∑–≤'—è–∑–∫–∏ –º—ñ–∂ –∑–º—ñ–Ω–Ω–∏–º–∏.

***–ü—ñ–¥—Å—É–º–∫–∏***

1. ***Linear Regression*** –ø–æ–∫–∞–∑–∞–ª–∞ –≥—ñ—Ä—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ –∑ Test R¬≤: -0.71, —â–æ –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, —â–æ –º–æ–¥–µ–ª—å –º–∞—î –Ω–∏–∑—å–∫—É —Ç–æ—á–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–µ –∑–¥–∞—Ç–Ω–∞ –¥–æ–±—Ä–µ —É–∑–∞–≥–∞–ª—å–Ω—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ.
2. ***Random Forest*** –ø–æ–∫–∞–∑–∞–ª–∞ –∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ Test R¬≤: 0.91, —â–æ –≤–∫–∞–∑—É—î –Ω–∞ –≤–∏—Å–æ–∫—É —Ç–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ —Ç–∞ —ó—ó –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ–±—Ä–µ —É–∑–∞–≥–∞–ª—å–Ω—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ.
3. –í–∏–±—ñ—Ä–∫–∏, –¥–µ –º–æ–¥–µ–ª—ñ –Ω–∞–π–±—ñ–ª—å—à–µ –ø–æ–º–∏–ª—è–ª–∏—Å—è, –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑ –≤–∏—Å–æ–∫–æ—é –≤–∞—Ä—ñ–∞–±–µ–ª—å–Ω—ñ—Å—Ç—é –∞–±–æ —Ç–∞–∫–∏–º–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.
4. Random Forest —î –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–æ—é –º–æ–¥–µ–ª–ª—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–Ω—É –Ω–∞ –¥–∞–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ –¥–∞–Ω–∏—Ö.
"""