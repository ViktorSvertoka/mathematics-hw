# -*- coding: utf-8 -*-
"""–î–ó8_–°–≤–µ—Ä—Ç–æ–∫–∞_–í—ñ–∫—Ç–æ—Ä_–í–∞—Å–∏–ª—å–æ–≤–∏—á.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZwKdYzrCPX7xtcz8uLxehm4Lz7yVaTA

# –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è. –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

##–ó–∞–≤–¥–∞–Ω–Ω—è 1

–í—ñ–∑—å–º–∏ –∫–æ–¥ —Å–∏–º—É–ª—è—Ü—ñ—ó —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è 7 –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Ç–µ–º–∏ 7 ‚Äú–¢–µ–æ—Ä—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π. –ö–æ–º–±—ñ–Ω–∞—Ç–æ—Ä–∏–∫–∞‚Äù. –ë—É–¥–µ–º–æ –≤–≤–∞–∂–∞—Ç–∏, —â–æ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π —É –∫–æ–∂–Ω–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î $x \sim –ì(0.3, 1.1)$, –¥–µ $–ì$ ‚Äî –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª—É.\
–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é $n = 100$ —Ä–∞–∑—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —á–∞—Å—É $t$.\
a) –ü–æ–±—É–¥—É–π –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É $x$\
–±) –ó–∞–ø—É—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é –∑ $t$, –≤—ñ–¥ 1 –¥–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, $\sim 60$ –∑ –∫—Ä–æ–∫–æ–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1 –∞–±–æ 2.\
\
**–ü—Ä–∏–º—ñ—Ç–∫–∞:** –∫—ñ–Ω—Ü–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è $t$ –≤–∑—è—Ç–æ —É–º–æ–≤–Ω–æ —Ä—ñ–≤–Ω–∏–º 60, –∞–ª–µ —Ü–µ –Ω–µ –≤—ñ–¥—ñ–≥—Ä–∞—î –≤–µ–ª–∏–∫–æ—ó —Ä–æ–ª—ñ, –≥–æ–ª–æ–≤–Ω–µ, —â–æ–± –≤–æ–Ω–æ –±—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–æ–∫—É ‚Äî –¥–æ–∑–≤–æ–ª—è–ª–æ –ø–æ–±–∞—á–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ–∫—É –∑–º—ñ–Ω–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —Ç–∞–∫ –≤–∞–∂–ª–∏–≤—ñ.\
\
–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è $t$ –ø–æ–±—É–¥—É–π –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ü—ñ–Ω–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä –π–æ–≥–æ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å. –ó—Ä–æ–±–∏ –≤–∏—Å–Ω–æ–≤–∫–∏ –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º $t$.
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# –ì–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Œ± = 0.3 —ñ Œ≤ = 1.1
alpha = 0.3
beta = 1.1

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –∑–∞ t –∫—Ä–æ–∫—ñ–≤
def stock_price_at_time_gamma(t):
    price = 0
    for _ in range(t):
        change = np.random.gamma(alpha, beta)
        price += change
    return price

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó n —Ä–∞–∑—ñ–≤ –∑–∞ t –∫—Ä–æ–∫—ñ–≤
def simulate_n_times_gamma(n, t):
    prices = [stock_price_at_time_gamma(t) for _ in range(n)]
    return prices

# –ß–∞—Å—Ç–∏–Ω–∞ (a): –ü–æ–±—É–¥–æ–≤–∞ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É x
sample_size = 10000
gamma_samples = np.random.gamma(alpha, beta, sample_size)

plt.figure(figsize=(10, 6))
plt.hist(gamma_samples, bins=50, density=True, edgecolor='k', alpha=0.7)
x = np.linspace(0, np.max(gamma_samples), 1000)
pdf = stats.gamma.pdf(x, alpha, scale=beta)
plt.plot(x, pdf, 'r-', lw=2, label=f'Gamma PDF (Œ±={alpha}, Œ≤={beta})')
plt.title('–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∑—Ä–∞–∑–∫—ñ–≤ –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª—É')
plt.xlabel('–ó–Ω–∞—á–µ–Ω–Ω—è')
plt.ylabel('–©—ñ–ª—å–Ω—ñ—Å—Ç—å')
plt.legend()
plt.grid(True)
plt.show()

# –ß–∞—Å—Ç–∏–Ω–∞ (b): –°–∏–º—É–ª—è—Ü—ñ—è —ñ –ø–æ–±—É–¥–æ–≤–∞ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö t
max_t = 60
step_t = 1
n_simulations = 100

for t in range(1, max_t + 1, step_t):
    prices = simulate_n_times_gamma(n_simulations, t)
    mean_price = np.mean(prices)

    plt.figure(figsize=(10, 6))
    plt.hist(prices, bins=20, edgecolor='k', alpha=0.7)
    plt.title(f'–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∫—É—Ä—Å—ñ–≤ –∞–∫—Ü—ñ–π –Ω–∞ t={t} –¥–ª—è {n_simulations} –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è\n–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ = {mean_price:.2f}')
    plt.xlabel('–¶—ñ–Ω–∞ –∞–∫—Ü—ñ–π')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.grid(True)
    plt.show()

    # Test for normality
    k2, p = stats.normaltest(prices)
    print(f"t = {t}, Normality test p-value = {p:.3f}")

import numpy as np
import matplotlib.pyplot as plt

def stock_price_at_time(t):
    price = 0
    for _ in range(t):
        change = np.random.choice([2, -1])
        price += change
    return price

def simulate_n_times(n, t):
    prices = [stock_price_at_time(t) for _ in range(n)]
    return prices

for n in [10, 100, 1000, 10000]:
    prices = simulate_n_times(n, 3)
    mean_price = np.mean(prices)

    plt.figure(figsize=(10, 6))
    plt.hist(prices, bins=20, edgecolor='k', alpha=0.7)
    plt.title(f'–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∫—É—Ä—Å—ñ–≤ –∞–∫—Ü—ñ–π –ø—Ä–∏ t=3 —Ñ–æ—Ä {n} –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è\n–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ = {mean_price:.2f}')
    plt.xlabel('–¶—ñ–Ω–∞ –∞–∫—Ü—ñ–π')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.grid(True)
    plt.show()

"""####–í–∏—Å–Ω–æ–≤–∫–∏:

- –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è $ùë°$ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ —Ç–æ–≥–æ, —â–æ —Ä–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–Ω –∞–∫—Ü—ñ–π —Å—Ç–∞—î –±–ª–∏–∂—á–∏–º –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É (–∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—é –≥—Ä–∞–Ω–∏—á–Ω–æ—é —Ç–µ–æ—Ä–µ–º–æ—é).
- –†–æ–∑–ø–æ–¥—ñ–ª –∑–º—ñ–Ω —Ü—ñ–Ω–∏ $x$, —è–∫–∏–π —î –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª–æ–º, —Å–ø—Ä–∏—á–∏–Ω—è—î –∞—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ—Å—Ç—å –Ω–∞ –º–∞–ª–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è—Ö $ùë°$, –∞–ª–µ –∑ —á–∞—Å–æ–º —Ü—è –∞—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ—Å—Ç—å –∑–º–µ–Ω—à—É—î—Ç—å—Å—è.

##–ó–∞–≤–¥–∞–Ω–Ω—è 2

–Ñ –Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö Product Advertising Data. –ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —ñ–∑ —Å–µ–º–∏ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö ‚Äî
—Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è, –±—ñ–ª–±–æ—Ä–¥–∏, Google Ads, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ–¥—ñ–∞, —ñ–Ω—Ñ–ª—é–µ–Ω—Å-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥

–û—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ–≤–ø—á–∏–∫, "Product_Sold", –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å–Ω—É –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É. –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Ä–∞—Ö—É–π —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è, –¥–∏—Å–ø–µ—Ä—Å—ñ—é, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, –ø–æ–±—É–¥—É–π –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–æ–∫–∞–∑–Ω–∏–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ç–∞ –ø–æ—Ä–∞—Ö—É–π –∫–æ—Ä–µ–ª—è—Ü—ñ—é –∑ Product_Sold.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import shapiro, normaltest, pearsonr
from google.colab import files
import io

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞ –∑ Google –î–∏—Å–∫—É
!gdown --id '1xxUxDZOafQ6ZNhX6Kfc3jvUcUtAZ2Kji'

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Google –î–∏—Å–∫—É
data_path = '/content/Advertising_Data.csv'
data = pd.read_csv(data_path)

# –û–ø–∏—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = data.describe()

# –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è, –¥–∏—Å–ø–µ—Ä—Å—ñ—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
means = data.mean()
variances = data.var()
std_devs = data.std()

# –ö–æ—Ä–µ–ª—è—Ü—ñ—è –∑ Product_Sold
correlations = data.corr()['Product_Sold']

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("Means:")
print(means)
print("\nVariances:")
print(variances)
print("\nStandard Deviations:")
print(std_devs)
print("\nCorrelations with Product_Sold:")
print(correlations)

# –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —Ç–∞ —Ç–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å
columns = data.columns[:-1]  # –í—Å—ñ –∫–æ–ª–æ–Ω–∫–∏, –∫—Ä—ñ–º Product_Sold

for column in columns:
    plt.figure(figsize=(10, 6))
    sns.histplot(data[column], kde=True, bins=30)
    plt.title(f'–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ {column}')
    plt.xlabel(column)
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.grid(True)
    plt.show()

    # –¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å
    stat, p = shapiro(data[column])
    print(f'Shapiro-Wilk —Ç–µ—Å—Ç –¥–ª—è {column}: Statistics={stat}, p={p}')

    stat, p = normaltest(data[column])
    print(f'D\'Agostino\'s K^2 —Ç–µ—Å—Ç –¥–ª—è {column}: Statistics={stat}, p={p}')

    if p < 0.05:
        print(f'–†–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è {column} —Ü–µ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (p < 0.05)')
    else:
        print(f'–†–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è {column} —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (p >= 0.05)')
    print(" ")

# –ü–æ–±—É–¥–æ–≤–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ
plt.figure(figsize=(12, 10))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix')
plt.show()

pip install pandas