# -*- coding: utf-8 -*-
"""–î–ó6_–°–≤–µ—Ä—Ç–æ–∫–∞_–í—ñ–∫—Ç–æ—Ä_–í–∞—Å–∏–ª—å–æ–≤–∏—á.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E9KIKRARI-KGoaVZQ8pQa0adRu9f-Jn1

#–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è. –Ü–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è. –ß–∏—Å–µ–ª—å–Ω–µ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è

**–û–ø–∏—Å –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è**

–¢–∏ –∑–∞–º–æ–≤–∏–≤/-–ª–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞–≤/-–ª–∞ –Ω–∞–±–ª–∏–∂–µ–Ω—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞—Å–∫—ñ–≤ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é —á–∞—Å—É) –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏, –∑–∞ —É–º–æ–≤–∏, —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤—ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é.
\
$$
2\left(\frac{4}{1.2\sqrt{2\pi }}e^{- \frac{1}{2}\left(\frac{x - 11}{1.2}\right)^2} + \frac{7}{2.4\sqrt{2\pi }}e^{- \frac{1}{2}\left(\frac{x - 15}{2.4}\right)^2}\right)
$$
\
$\boldsymbol –ü\boldsymbol —Ä\boldsymbol –∏\boldsymbol –º\boldsymbol —ñ\boldsymbol —Ç\boldsymbol –∫\boldsymbol –∞*\ldotp$  –§–æ—Ä–º–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–±–ª–∏–∂–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–µ–∞–ª—å–Ω–∏–º —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º, –∞–ª–µ —Ñ—É–Ω–∫—Ü—ñ—è –±—É–ª–∞ —Å–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è –ª–µ–≥—à–æ–≥–æ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è.

–ü–æ–∑–Ω–∞—á–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —ñ –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è —è–∫ a=9 —Ç–∞ b=18 –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.

–¢–æ–±—ñ –±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞—Å–∫—ñ–≤, –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–ø—Ä–æ–¥–æ–≤–∂ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è (–≤ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –∑ 9 –¥–æ 18).

**–ó–∞–≤–¥–∞–Ω–Ω—è 1**. –í—ñ–∑—É–∞–ª—ñ–∑—É–π —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞ –≤—ñ–¥—Ä—ñ–∑–∫—É –≤—ñ–¥ 0 –¥–æ 24. –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é SymPy –ø–æ—Ä–∞—Ö—É–π –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª –≤—ñ–¥ a –¥–æ b.

–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞—Å–∫—ñ–≤, –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–ø—Ä–æ–¥–æ–≤–∂ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—á–∏—Å–ª–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü—ñ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥ ùëé = 9 –¥–æ ùëè = 18, –∞ —Ç–∞–∫–æ–∂ –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞ –≤—ñ–¥—Ä—ñ–∑–∫—É –≤—ñ–¥ 0 –¥–æ 24.
"""

#–û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—ñ–≤

import sympy as sp

# –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó x
x = sp.Symbol('x')

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
efficiency_func = 2 * ((4 / (1.2 * sp.sqrt(2 * sp.pi))) * sp.exp(-0.5 * ((x - 11) / 1.2) ** 2) +
                       (7 / (2.4 * sp.sqrt(2 * sp.pi))) * sp.exp(-0.5 * ((x - 15) / 2.4) ** 2))

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É
indefinite_integral = sp.integrate(efficiency_func, x)
indefinite_integral

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –≤—ñ–¥ 9 –¥–æ 18
a, b = 9, 18
definite_integral = sp.integrate(efficiency_func, (x, a, b))
definite_integral.evalf()

#–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó

import numpy as np
import matplotlib.pyplot as plt

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –¥–ª—è x –≤—ñ–¥ 0 –¥–æ 24
x = np.linspace(0, 24, 1000)
y = efficiency(x)

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É
plt.plot(x, y)
plt.xlabel('–ß–∞—Å –¥–æ–±–∏')
plt.ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏')
plt.title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏')
plt.grid(True)
plt.axvline(x=9, color='r', linestyle='--', label='–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è')
plt.axvline(x=18, color='g', linestyle='--', label='–ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è')
plt.legend()
plt.show()

"""–ù–∞ –≥—Ä–∞—Ñ—ñ–∫—É –≤–∏—â–µ –∑–æ–±—Ä–∞–∂–µ–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏. –ß–µ—Ä–≤–æ–Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –ª—ñ–Ω—ñ—è –ø–æ–∑–Ω–∞—á–∞—î –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è (9:00), –∞ –∑–µ–ª–µ–Ω–∞ ‚Äî –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è (18:00).

$\int f\left(x\right)dx$

–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü—ñ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥ 9:00 –¥–æ 18:00 –¥–æ—Ä—ñ–≤–Ω—é—î:

$\int_9^{18}f\left(x\right)dx = 20.0516$

–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —Å–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞—Å–∫—ñ–≤, –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–ø—Ä–æ–¥–æ–≤–∂ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è (–∑ 9:00 –¥–æ 18:00), —Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–±–ª–∏–∑–Ω–æ 20.05 —Ç–∞—Å–∫—ñ–≤.

**–ó–∞–≤–¥–∞–Ω–Ω—è 2**. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é —á–∏—Å–µ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤ —Ç–∞ –ø–æ—Ä–∞—Ö—É–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª –≤—ñ–¥ a –¥–æ b.

–î–ª—è —á–∏—Å–µ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–∞–∫–∏–π –ø—ñ–¥—Ö—ñ–¥: —Ä–æ–∑–±–∏–≤–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –º–∞–ª–µ–Ω—å–∫—ñ –≤—ñ–¥—Ä—ñ–∑–∫–∏, –æ–±—á–∏—Å–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥—Ä—ñ–∑–∫–∞, –∞ –ø–æ—Ç—ñ–º —Å—É–º—É—î–º–æ –ø–ª–æ—â—ñ –≤—Å—ñ—Ö –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤, –≤–∏—Å–æ—Ç–∞ –∫–æ–∂–Ω–æ–≥–æ –∑ —è–∫–∏—Ö –¥–æ—Ä—ñ–≤–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—é —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –≤—ñ–¥—Ä—ñ–∑–∫–∞, –∞ —à–∏—Ä–∏–Ω–∞ ‚Äî –¥–æ–≤–∂–∏–Ω—ñ –≤—ñ–¥—Ä—ñ–∑–∫–∞.
"""

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# –§—É–Ω–∫—Ü—ñ—è —á–∏—Å–µ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤
def rectangle_method(f, a, b, n):
    dx = (b - a) / n  # —à–∏—Ä–∏–Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥—Ä—ñ–∑–∫–∞
    total_area = 0
    for i in range(n):
        x_i = a + (i + 0.5) * dx  # —Å–µ—Ä–µ–¥–∏–Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥—Ä—ñ–∑–∫–∞
        total_area += f(x_i) * dx
    return total_area

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
a = 9
b = 18
n = 1000  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É
integral_value = rectangle_method(efficiency, a, b, n)
integral_value

"""**–ó–∞–≤–¥–∞–Ω–Ω—è 3**. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é —á–∏—Å–µ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü—ñ–π —Ç–∞ –ø–æ—Ä–∞—Ö—É–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª –≤—ñ–¥ a –¥–æ b.

–î–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞—î–º–æ —Ç–∞–∫—ñ –∫—Ä–æ–∫–∏:

*   –†–æ–∑–¥—ñ–ª–∏–º–æ –≤—ñ–¥—Ä—ñ–∑–æ–∫ –≤—ñ–¥ ùëé –¥–æ ùëè –Ω–∞ ùëõ —Ä—ñ–≤–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω.
*   –û–±—á–∏—Å–ª–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó ùëì(ùë•) –≤ –∫–æ–∂–Ω—ñ–π —Ç–æ—á—Ü—ñ —Ü—å–æ–≥–æ —Ä–æ–∑–±–∏—Ç—Ç—è.
*   –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ñ–æ—Ä–º—É–ª—É –º–µ—Ç–æ–¥—É —Ç—Ä–∞–ø–µ—Ü—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ —Å—É—Å—ñ–¥–Ω—ñ—Ö —Ç–æ—á–æ–∫.
*   –î–æ–¥–∞–º–æ –≤—Å—ñ —Ü—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–∑–æ–º, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–±–ª–∏–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É.

"""

def trapezoidal_rule_integration(f, a, b, n):
    """
    –ß–∏—Å–µ–ª—å–Ω–µ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü—ñ–π.

    :param f: –§—É–Ω–∫—Ü—ñ—è, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏.
    :param a: –ù–∏–∂–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è.
    :param b: –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è.
    :param n: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤.
    :return: –ù–∞–±–ª–∏–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É.
    """
    dx = (b - a) / n  # –®–∏—Ä–∏–Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    integral = 0.5 * (f(a) + f(b))  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–±–ª–∏–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É
    for i in range(1, n):
        xi = a + i * dx  # –¢–æ—á–∫–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ
        integral += f(xi)  # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ü—ñ–π —Ç–æ—á—Ü—ñ
    integral *= dx  # –ú–Ω–æ–∂–∏–º–æ –Ω–∞ —à–∏—Ä–∏–Ω—É –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    return integral

# –í–∏–∑–Ω–∞—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é f –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
f = lambda x: 2 * (4 / (1.2 * np.sqrt(2 * np.pi)) * np.exp(-0.5 * ((x - 11) / 1.2)**2) +
                   7 / (2.4 * np.sqrt(2 * np.pi)) * np.exp(-0.5 * ((x - 15) / 2.4)**2))

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –º–µ—Ç–æ–¥ —Ç—Ä–∞–ø–µ—Ü—ñ–π –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –≤—ñ–¥ a –¥–æ b
a, b = 9, 18
n = 1000  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)

approx_integral_trap = trapezoidal_rule_integration(f, a, b, n)
print(f"–ù–∞–±–ª–∏–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –≤—ñ–¥ {a} –¥–æ {b}: {approx_integral_trap}")

"""**–ó–∞–≤–¥–∞–Ω–Ω—è 4**. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é —á–∏—Å–µ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –°—ñ–º–ø—Å–æ–Ω–∞ —Ç–∞ –ø–æ—Ä–∞—Ö—É–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª –≤—ñ–¥ a –¥–æ b.

–ú–µ—Ç–æ–¥ –°—ñ–º–ø—Å–æ–Ω–∞ —î —á–∏—Å–µ–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ñ –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—ñ–≤. –í—ñ–Ω —î —Ç–æ—á–Ω—ñ—à–∏–º –∑–∞ –º–µ—Ç–æ–¥ —Ç—Ä–∞–ø–µ—Ü—ñ–π —ñ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–∞–±–ª–∏–∂–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –Ω–∞ –∑–∞–¥–∞–Ω–æ–º—É –≤—ñ–¥—Ä—ñ–∑–∫—É.
"""

def simpsons_rule_integration(f, a, b, n):
    """
    –ß–∏—Å–µ–ª—å–Ω–µ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –°—ñ–º–ø—Å–æ–Ω–∞.

    :param f: –§—É–Ω–∫—Ü—ñ—è, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏.
    :param a: –ù–∏–∂–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è.
    :param b: –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è.
    :param n: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ (–ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–∞—Ä–Ω–∏–º —á–∏—Å–ª–æ–º).
    :return: –ù–∞–±–ª–∏–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É.
    """
    if n % 2 != 0:
        raise ValueError("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–∞—Ä–Ω–∏–º —á–∏—Å–ª–æ–º")

    dx = (b - a) / n
    x = np.linspace(a, b, n + 1)
    y = f(x)

    integral = dx / 3 * np.sum(y[0:-1:2] + 4 * y[1::2] + y[2::2])

    return integral

# –í–∏–∑–Ω–∞—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é f –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
f = lambda x: 2 * (4 / (1.2 * np.sqrt(2 * np.pi)) * np.exp(-0.5 * ((x - 11) / 1.2)**2) +
                   7 / (2.4 * np.sqrt(2 * np.pi)) * np.exp(-0.5 * ((x - 15) / 2.4)**2))

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –º–µ—Ç–æ–¥ –°—ñ–º–ø—Å–æ–Ω–∞ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –≤—ñ–¥ a –¥–æ b
a, b = 9, 18
n = 1000  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ (–ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–∞—Ä–Ω–∏–º —á–∏—Å–ª–æ–º)

approx_integral_simpson = simpsons_rule_integration(f, a, b, n)
print(f"–ù–∞–±–ª–∏–∂–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –≤—ñ–¥ {a} –¥–æ {b}: {approx_integral_simpson}")

"""**–ó–∞–≤–¥–∞–Ω–Ω—è 5**. –ü–æ—Ä–∞—Ö—É–π —ñ–Ω—Ç–µ–≥—Ä–∞–ª –≤—ñ–¥ a –¥–æ b –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó scipy.integrate.quad.


"""

from scipy.integrate import quad
import numpy as np

# –í–∏–∑–Ω–∞—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é f –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
f = lambda x: 2 * ((4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2)**2) +
                   (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4)**2))

# –í–∏–∑–Ω–∞—á–∏–º–æ –º–µ–∂—ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
a, b = 9, 18

# –û–±—á–∏—Å–ª–∏–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó quad
integral_value, error = quad(f, a, b)
print("–ó–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É –≤—ñ–¥", a, "–¥–æ", b, "–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é quad:", integral_value)

pip install scipy

pip install numpy

pip install matplotlib